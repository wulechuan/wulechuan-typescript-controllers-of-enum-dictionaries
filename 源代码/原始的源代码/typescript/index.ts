export type 范_字典之唯一标识 = string; // | number;

export interface 范_界面标准数据项_最简形态 {
    唯一标识: 范_字典之唯一标识;
}

export type 范_界面标准数据项_默认形态 = 范_界面标准数据项_最简形态 & {
    界面措辞: string;
    值: any;
    负载?: any;
};

export type 范_界面标准数据集之列表形式<范_界面标准数据项 extends 范_界面标准数据项_最简形态> = Array<范_界面标准数据项>;
export type 范_界面标准数据集之哈希表形式<范_界面标准数据项 extends 范_界面标准数据项_最简形态> = { [数据项之唯一标识: string]: 范_界面标准数据项; };



export type 范_数据映射表_从界面措辞至值 = { [界面措辞: string]: any; };
export type 范_数据映射表_从值至界面措辞 = { [值对应之文本: string]: string; };



export type 范_用以构建某字典机之配置项集<范_该字典的界面标准数据项 extends 范_界面标准数据项_最简形态, 范_该字典的原始数据项 = any> = {
    该字典的唯一标识?: string;

    特征集?: {
        不应在所属字典群初始化时获取或构建字典数据?: boolean;
        不应构建列表形式的界面标准数据?: boolean;
        应构建哈希表形式的界面标准数据?: boolean;
    };

    自定义事件之处理程序集?: {
        获取或构建字典的原始数据?: () => Promise<Array<范_该字典的原始数据项>>;

        根据字典原始数据构建映射器集?: (
            字典的原始数据之列表形式: Array<范_该字典的原始数据项>
        ) => {
            自界面措辞至值: 范_数据映射表_从界面措辞至值;
            自值至界面措辞: 范_数据映射表_从值至界面措辞;
        };

        根据某字典原始数据项构建界面标准数据项?: (
            该字典的某原始数据项: 范_该字典的原始数据项
        ) => 范_该字典的界面标准数据项;
    };
};

export type 范_字典机<范_该字典的界面标准数据项 extends 范_界面标准数据项_最简形态, 范_该字典的原始数据项 = any, 范_this = any> = {
    该字典的唯一标识: string;

    特征集: {
        当下的数据系某次成功构建而得的: boolean;
        不应在所属字典群初始化时获取或构建字典数据: boolean;
        不应构建列表形式的界面标准数据: boolean;
        应构建哈希表形式的界面标准数据: boolean;
    };

    数据集: {
        原始数据列表: null | Array<范_该字典的原始数据项>;

        界面标准数据: {
            列表形式: 范_界面标准数据集之列表形式<范_该字典的界面标准数据项>;
            哈希表形式?: 范_界面标准数据集之哈希表形式<范_该字典的界面标准数据项>;
        };

        数据映射表集: {
            自界面措辞至值: 范_数据映射表_从界面措辞至值;
            自值至界面措辞: 范_数据映射表_从值至界面措辞;
        };
    };

    行为: {
        清空数据: (this: 范_this) => void;
        重建数据: (this: 范_this, ...参数表: any[]) => Promise<null>;
    };

    _幕后行为: {
        根据字典原始数据列表构建界面标准数据列表: (this: 范_this) => void;
    };

    _自定义事件之处理程序集: {
        获取或构建字典的原始数据: (
            this: 范_this,
            ...参数表: any[]
        ) => Promise<Array<范_该字典的原始数据项>>;

        根据字典原始数据构建映射器集: (
            this: 范_this,
            字典的原始数据之列表形式: Array<范_该字典的原始数据项>
        ) => {
            自界面措辞至值: 范_数据映射表_从界面措辞至值;
            自值至界面措辞: 范_数据映射表_从值至界面措辞;
        };

        根据某字典原始数据项构建界面标准数据项: (
            this: 范_this,
            该字典的某原始数据项: 范_该字典的原始数据项
        ) => 范_该字典的界面标准数据项;
    };
};

export type 范_字典机之集之列表形式<范_this, 范_所有字典的界面标准数据项的共同形态 extends 范_界面标准数据项_最简形态> = Array<范_字典机<范_所有字典的界面标准数据项的共同形态, any, 范_this>>;

export type 范_字典机之集之哈希表形式<范_this, 范_所有字典的界面标准数据项的共同形态 extends 范_界面标准数据项_最简形态> = {
    [字典之唯一标识: string]: 范_字典机<范_所有字典的界面标准数据项的共同形态, any, 范_this>;
};



export type 范_用以构建字典群之总机之配置项集<范_所有字典的界面标准数据项的共同形态 extends 范_界面标准数据项_最简形态, 范_所有字典的原始数据项的共同形态 = any> = {
    不应自动初始化?: boolean;

    最初的一批用以构建字典机的配置项集之列表?: Array<范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_所有字典的原始数据项的共同形态>>;

    自定义事件之处理程序集?: {
        根据某字典原始数据构建其映射器集的默认做法?: (
            字典的原始数据之列表形式: Array<范_所有字典的原始数据项的共同形态>
        ) => {
            自界面措辞至值: 范_数据映射表_从界面措辞至值;
            自值至界面措辞: 范_数据映射表_从值至界面措辞;
        };

        根据某字典之某原始数据项构建其对应界面标准数据项的默认做法?: (
            该字典的某原始数据项: 范_所有字典的原始数据项的共同形态
        ) => 范_所有字典的界面标准数据项的共同形态;
    };
};

export type 范_字典群之总机成批重建字典的执行方案 = (
    | '仅限从未构建过数据的的字典机参与' // 例如由 `追加一批字典机` 新追加的那些字典机。
    | '所有具备自动初始化特征的字典机均参与' // 即为 `不应在所属字典群初始化时获取或构建字典数据` 之特征取 'true' 的那些字典机，哪怕它们曾经成功初始化过。
    | '强制一切字典机参与' // 即为一切字典机。换句话说，忽略各字典机各自的 `不应在所属字典群初始化时获取或构建字典数据` 之特征。
);

export type 范_字典群之总机<范_所有字典的界面标准数据项的共同形态 extends 范_界面标准数据项_最简形态, 范_所有字典的原始数据项的共同形态, 范_this> = {
    字典机之集: {
        列表形式: 范_字典机之集之列表形式<范_this, 范_所有字典的界面标准数据项的共同形态>;
        哈希表形式: 范_字典机之集之哈希表形式<范_this, 范_所有字典的界面标准数据项的共同形态>;
    };

    数据集: {
        用以构建各字典机之配置项集之列表: Array<范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, any>>;
    };

    行为: {
        初始化: (this: 范_this) => Promise<null>;

        追加一批字典机: <范_该批字典机之原始数据项之共同形态 = any>(
            this: 范_this,
            用以构建一批字典机之配置项集之列表: Array<范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_该批字典机之原始数据项之共同形态>>
        ) => void;

        令所有字典机按需获取或构建原始数据并进而构建衍生数据: (
            this: 范_this,
            须为哪些字典机重建数据?: 范_字典群之总机成批重建字典的执行方案
        ) => Promise<null>;

        取字典机: <范_该字典的原始数据项 = any>(
            this: 范_this,
            欲索取之字典之唯一标识: 范_字典之唯一标识, 提请本次索取任务之主体之描述?: string
        ) => (null | 范_字典机<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项, 范_this>);

        取字典机之列表形式的界面标准数据: (
            this: 范_this,
            欲索取之字典之唯一标识: 范_字典之唯一标识, 提请本次索取任务之主体之描述?: string
        ) => 范_界面标准数据集之列表形式<范_所有字典的界面标准数据项的共同形态>;

        取字典机之哈希表形式的界面标准数据: (
            this: 范_this,
            欲索取之字典之唯一标识: 范_字典之唯一标识, 提请本次索取任务之主体之描述?: string
        ) => 范_界面标准数据集之哈希表形式<范_所有字典的界面标准数据项的共同形态>;

    };

    _幕后行为: {
        按需追加单个字典机: <范_该字典的原始数据项 = any>(
            this: 范_this,
            用以构建该字典机之配置项集?: 范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项>
        ) => (null | 范_字典机<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项, 范_this>);

        构建单个字典机: <范_该字典的原始数据项 = any>(
            this: 范_this,
            用以构建该字典机之配置项集?: 范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项>
        ) => (null | 范_字典机<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项, 范_this>);
    };

    _自定义事件之处理程序集: {
        根据某字典原始数据构建其映射器集的默认做法?: (
            this: 范_this,
            字典的原始数据之列表形式: Array<范_所有字典的原始数据项的共同形态>
        ) => {
            自界面措辞至值: 范_数据映射表_从界面措辞至值;
            自值至界面措辞: 范_数据映射表_从值至界面措辞;
        };

        根据某字典之某原始数据项构建其对应界面标准数据项的默认做法?: (
            this: 范_this,
            该字典的某原始数据项: 范_所有字典的原始数据项的共同形态
        ) => 范_所有字典的界面标准数据项的共同形态;
    };
};




function 是合规的唯一标识 (待检验的唯一标识: any): boolean {
    if (![
        'string',
        'number',
    ].includes(typeof 待检验的唯一标识)) {
        return false
    }

    if (typeof 待检验的唯一标识 === 'number' && !isFinite(待检验的唯一标识)) {
        return false
    }

    return true
}

function 是合规的非列表对象 (待检验的值: any): boolean {
    return !!待检验的值 && typeof 待检验的值 === 'object' && !Array.isArray(待检验的值)
}



export function 构建字典群之总机 <范_所有字典的界面标准数据项的共同形态 extends 范_界面标准数据项_最简形态 = 范_界面标准数据项_默认形态, 范_所有字典的原始数据项的共同形态 = any, 范_this = any>(
    thisObject: 范_this,
    字典群之总机之配置项集?: 范_用以构建字典群之总机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_所有字典的原始数据项的共同形态>
): 范_字典群之总机<范_所有字典的界面标准数据项的共同形态, 范_所有字典的原始数据项的共同形态, 范_this> {
    type 范_字典群之总机之构建配置项集_实用型号 = 范_用以构建字典群之总机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_所有字典的原始数据项的共同形态>;
    type 范_字典群之总机_实用型号 = 范_字典群之总机<范_所有字典的界面标准数据项的共同形态, 范_所有字典的原始数据项的共同形态, 范_this>;



    if (!是合规的非列表对象(字典群之总机之配置项集)) {
        字典群之总机之配置项集 = {}
    }

    const 已知合规的总机之配置项集: 范_字典群之总机之构建配置项集_实用型号 = 字典群之总机之配置项集!

    const {
        不应自动初始化,
    } = 已知合规的总机之配置项集



    let {
        最初的一批用以构建字典机的配置项集之列表,
        自定义事件之处理程序集: _自定义事件之处理程序集,
    } = 已知合规的总机之配置项集

    if (!是合规的非列表对象(_自定义事件之处理程序集)) {
        _自定义事件之处理程序集 = {}
    }

    const {
        根据某字典原始数据构建其映射器集的默认做法: 根据某字典原始数据构建其映射器集的默认做法_this未知,
        根据某字典之某原始数据项构建其对应界面标准数据项的默认做法: 根据某字典之某原始数据项构建其对应界面标准数据项的默认做法_this未知,
    } = _自定义事件之处理程序集!



    let 根据某字典原始数据构建其映射器集的默认做法: 范_字典群之总机_实用型号['_自定义事件之处理程序集']['根据某字典原始数据构建其映射器集的默认做法']

    if (typeof 根据某字典原始数据构建其映射器集的默认做法_this未知 === 'function') {
        根据某字典原始数据构建其映射器集的默认做法 = 根据某字典原始数据构建其映射器集的默认做法_this未知.bind(thisObject)
    } else {
        根据某字典原始数据构建其映射器集的默认做法 = undefined
    }



    let 根据某字典之某原始数据项构建其对应界面标准数据项的默认做法: 范_字典群之总机_实用型号['_自定义事件之处理程序集']['根据某字典之某原始数据项构建其对应界面标准数据项的默认做法']

    if (typeof 根据某字典之某原始数据项构建其对应界面标准数据项的默认做法_this未知 === 'function') {
        根据某字典之某原始数据项构建其对应界面标准数据项的默认做法 = 根据某字典之某原始数据项构建其对应界面标准数据项的默认做法_this未知.bind(thisObject)
    } else {
        根据某字典之某原始数据项构建其对应界面标准数据项的默认做法 = undefined
    }



    const 初始化 = (): Promise<null> => 令所有字典机按需获取或构建原始数据并进而构建衍生数据('仅限从未构建过数据的的字典机参与')



    const 追加一批字典机 = <范_该批字典机之原始数据项之共同形态 = any>(
        用以构建一批字典机之配置项集之列表: Array<范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_该批字典机之原始数据项之共同形态>>
    ): void => {
        if (!Array.isArray(用以构建一批字典机之配置项集之列表)) { return }
        const { 按需追加单个字典机 } = 该字典群之总机._幕后行为
        用以构建一批字典机之配置项集之列表.forEach(按需追加单个字典机)
    }



    const 令所有字典机按需获取或构建原始数据并进而构建衍生数据 = (须为哪些字典机重建数据?: 范_字典群之总机成批重建字典的执行方案): Promise<null> => {
        const 合规的方案: Array<范_字典群之总机成批重建字典的执行方案> = [
            '仅限从未构建过数据的的字典机参与',
            '所有具备自动初始化特征的字典机均参与',
            '强制一切字典机参与',
        ]

        if (typeof 须为哪些字典机重建数据 === 'string' && !合规的方案.includes(须为哪些字典机重建数据)) {
            须为哪些字典机重建数据 = '仅限从未构建过数据的的字典机参与'
        }

        let 须为其构建数据之字典机之列表 = 该字典群之总机.字典机之集.列表形式

        if (须为哪些字典机重建数据 === '仅限从未构建过数据的的字典机参与') {
            须为其构建数据之字典机之列表 = 须为其构建数据之字典机之列表.filter(某字典机 => !某字典机.特征集.不应在所属字典群初始化时获取或构建字典数据 && !某字典机.特征集.当下的数据系某次成功构建而得的)
        } else if (须为哪些字典机重建数据 === '所有具备自动初始化特征的字典机均参与') {
            须为其构建数据之字典机之列表 = 须为其构建数据之字典机之列表.filter(某字典机 => !某字典机.特征集.不应在所属字典群初始化时获取或构建字典数据)
        }

        return Promise.allSettled(须为其构建数据之字典机之列表.map(某字典机 => 某字典机.行为.重建数据)).then(() => null).catch(() => null)
    }



    const 取字典机 = <范_该字典的原始数据项 = any>(
        字典之唯一标识: 范_字典之唯一标识,
        提请本次索取任务之主体之描述?: string
    ): (null | 范_字典机<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项, 范_this>) => {
        const 字典机之哈希表 = 该字典群之总机.字典机之集.哈希表形式
        const 字典机 = 字典机之哈希表[字典之唯一标识]
        return 字典机 || null
    }



    const 取字典机之列表形式的界面标准数据 = <范_该字典的原始数据项 = any>(
        字典之唯一标识: 范_字典之唯一标识,
        提请本次索取任务之主体之描述?: string
    ): 范_界面标准数据集之列表形式<范_所有字典的界面标准数据项的共同形态> => {
        const 字典机 = 取字典机<范_该字典的原始数据项>(字典之唯一标识, 提请本次索取任务之主体之描述)
        if (字典机) {
            return 字典机.数据集.界面标准数据.列表形式
        } else {
            return []
        }
    }



    const 取字典机之哈希表形式的界面标准数据 = <范_该字典的原始数据项 = any>(
        字典之唯一标识: 范_字典之唯一标识,
        提请本次索取任务之主体之描述?: string
    ): 范_界面标准数据集之哈希表形式<范_所有字典的界面标准数据项的共同形态> => {
        const 字典机 = 取字典机<范_该字典的原始数据项>(字典之唯一标识, 提请本次索取任务之主体之描述)

        let 哈希表形式: 范_界面标准数据集之哈希表形式<范_所有字典的界面标准数据项的共同形态> | undefined = undefined

        if (字典机 && 字典机.数据集.界面标准数据.哈希表形式) {
            哈希表形式 = 字典机.数据集.界面标准数据.哈希表形式
        }

        if (哈希表形式) {
            return 哈希表形式
        } else {
            return {}
        }
    }



    const 按需追加单个字典机 = <范_该字典的原始数据项 = any>(
        用以构建该字典机之配置项集?: 范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项>
    ): (null | 范_字典机<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项, 范_this>) => {
        if (!是合规的非列表对象(用以构建该字典机之配置项集)) { return null }
        const 已知合规的配置项集: 范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项> = 用以构建该字典机之配置项集!

        const { 该字典的唯一标识 } = 已知合规的配置项集
        if (!是合规的唯一标识(该字典的唯一标识)) { return null }
        const 已知合规的唯一标识: 范_字典之唯一标识 = 该字典的唯一标识!

        const 字典机 = 取字典机<范_该字典的原始数据项>(已知合规的唯一标识, '按需追加单个字典机')
        if (字典机) {
            console.warn(`不应重复构建标识为 “${已知合规的唯一标识}” 的【字典机】。已略过该构建任务。`)
            return 字典机
        }

        const 新构建的字典机 = 构建单个字典机(已知合规的配置项集)
        if (!新构建的字典机) {
            return null
        }

        const { 字典机之集 } = 该字典群之总机

        字典机之集.列表形式.push(新构建的字典机)
        字典机之集.哈希表形式[已知合规的唯一标识] = 新构建的字典机

        return 新构建的字典机
    }



    const 构建单个字典机 = <范_该字典的原始数据项 = any>(
        用以构建该字典机之配置项集?: 范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项>
    ): (null | 范_字典机<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项, 范_this>) => {
        type 范_配置项集_实用型号 = 范_用以构建某字典机之配置项集<范_所有字典的界面标准数据项的共同形态, 范_该字典的原始数据项>;
        type 范_字典机_实用型号 = 范_字典机<范_所有字典的界面标准数据项的共同形态>;



        if (!是合规的非列表对象(用以构建该字典机之配置项集)) { return null }
        const 已知合规的配置项集: 范_配置项集_实用型号 = 用以构建该字典机之配置项集!

        const { 该字典的唯一标识: 待检测的唯一标识 } = 已知合规的配置项集
        if (!是合规的唯一标识(待检测的唯一标识)) { return null }
        const 该字典的唯一标识: 范_字典之唯一标识 = 待检测的唯一标识!

        const { 自定义事件之处理程序集: 待检测的自定义事件之处理程序集 } = 已知合规的配置项集
        if (!是合规的非列表对象(待检测的自定义事件之处理程序集)) { return null }
        const 自定义事件之处理程序集: 范_配置项集_实用型号['自定义事件之处理程序集'] = 待检测的自定义事件之处理程序集!

        const {
            获取或构建字典的原始数据: 获取或构建字典的原始数据_this未知,
        } = 自定义事件之处理程序集

        if (typeof 获取或构建字典的原始数据_this未知 !== 'function') {
            return null
        }

        const 获取或构建字典的原始数据: 范_字典机_实用型号['_自定义事件之处理程序集']['获取或构建字典的原始数据'] = 获取或构建字典的原始数据_this未知.bind(thisObject)



        const 根据字典原始数据构建映射器集_this未知 = 自定义事件之处理程序集.根据字典原始数据构建映射器集

        let 根据字典原始数据构建映射器集: 范_字典机_实用型号['_自定义事件之处理程序集']['根据字典原始数据构建映射器集'] | undefined = undefined

        if (typeof 根据字典原始数据构建映射器集_this未知 !== 'function' && typeof 根据某字典原始数据构建其映射器集的默认做法 === 'function') {
            根据字典原始数据构建映射器集 = 根据某字典原始数据构建其映射器集的默认做法
        }

        if (typeof 根据字典原始数据构建映射器集 !== 'function') {
            console.error('TODO')
            return null
        }



        const 根据字典原始数据构建界面标准数据_this未知 = 自定义事件之处理程序集.根据某字典原始数据项构建界面标准数据项

        let 根据某字典原始数据项构建界面标准数据项: 范_字典机_实用型号['_自定义事件之处理程序集']['根据某字典原始数据项构建界面标准数据项'] | undefined = undefined

        if (typeof 根据字典原始数据构建界面标准数据_this未知 !== 'function' && typeof 根据某字典之某原始数据项构建其对应界面标准数据项的默认做法 === 'function') {
            根据某字典原始数据项构建界面标准数据项 = 根据某字典之某原始数据项构建其对应界面标准数据项的默认做法
        }

        if (typeof 根据某字典原始数据项构建界面标准数据项 !== 'function') {
            console.error('TODO')
            return null
        }



        let {
            特征集: 待检验的特征集,
        } = 已知合规的配置项集

        if (!是合规的非列表对象(待检验的特征集)) {
            待检验的特征集 = {}
        }

        const 不应在所属字典群初始化时获取或构建字典数据 = !!待检验的特征集!.不应在所属字典群初始化时获取或构建字典数据
        const 不应构建列表形式的界面标准数据 = !!待检验的特征集!.不应构建列表形式的界面标准数据
        const 应构建哈希表形式的界面标准数据 = !!待检验的特征集!.应构建哈希表形式的界面标准数据

        if (不应构建列表形式的界面标准数据 && !应构建哈希表形式的界面标准数据) {
            console.warn(`字典 “${该字典的唯一标识}” 既不允许构建【列表式】界面标准数据，也不允许构建【哈希表式】界面标准数据。`)
        }



        const 根据字典原始数据列表构建界面标准数据列表 = (): void => {
            if (不应构建列表形式的界面标准数据 && !应构建哈希表形式的界面标准数据) {
                return
            }

            const 用以逐项映射的函数 = 该字典机._自定义事件之处理程序集.根据某字典原始数据项构建界面标准数据项
            const { 原始数据列表 } = 该字典机.数据集

            if (!Array.isArray(原始数据列表)) { return }

            const 界面标准数据之列表: 范_字典机_实用型号['数据集']['界面标准数据']['列表形式'] = []
            const 界面标准数据之哈希表: 范_字典机_实用型号['数据集']['界面标准数据']['哈希表形式'] = {}

            原始数据列表.forEach(某原始数据项 => {
                const 界面标准数据项 = 用以逐项映射的函数(某原始数据项)
                if (!界面标准数据项) { return }
                const { 唯一标识 } = 界面标准数据项
                if (!是合规的唯一标识(唯一标识)) { return }

                if (!不应构建列表形式的界面标准数据) {
                    界面标准数据之列表.push(界面标准数据项)
                }

                if (应构建哈希表形式的界面标准数据) {
                    界面标准数据之哈希表[唯一标识] = 界面标准数据项
                }
            })

            if (!不应构建列表形式的界面标准数据) {
                该字典机.数据集.界面标准数据.列表形式 = 界面标准数据之列表
            }

            if (应构建哈希表形式的界面标准数据) {
                该字典机.数据集.界面标准数据.哈希表形式 = 界面标准数据之哈希表
            }
        }



        const 清空数据 = (): void => {
            const { 特征集, 数据集 } = 该字典机

            数据集.原始数据列表 = null
            数据集.数据映射表集.自界面措辞至值 = {}
            数据集.数据映射表集.自值至界面措辞 = {}
            数据集.界面标准数据.列表形式 = []
            数据集.界面标准数据.哈希表形式 = {}

            特征集.当下的数据系某次成功构建而得的 = false
        }



        const 重建数据 = (...参数表: any[]): Promise<null> => {
            该字典机.行为.清空数据()

            return 该字典机._自定义事件之处理程序集.获取或构建字典的原始数据(...参数表).then(原始数据列表 => {
                该字典机.数据集.原始数据列表 = 原始数据列表

                该字典机._自定义事件之处理程序集.根据字典原始数据构建映射器集(原始数据列表)
                该字典机._幕后行为.根据字典原始数据列表构建界面标准数据列表()

                该字典机.特征集.当下的数据系某次成功构建而得的 = true

                return null
            })
        }



        const 该字典机: 范_字典机_实用型号 = {
            该字典的唯一标识,

            特征集: {
                当下的数据系某次成功构建而得的: false,
                不应在所属字典群初始化时获取或构建字典数据,
                不应构建列表形式的界面标准数据,
                应构建哈希表形式的界面标准数据,
            },

            数据集: {
                原始数据列表: null,

                界面标准数据: {
                    列表形式: [],
                    哈希表形式: {},
                },

                数据映射表集: {
                    自值至界面措辞: {},
                    自界面措辞至值: {},
                },
            },

            行为: {
                清空数据,
                重建数据,
            },

            _幕后行为: {
                根据字典原始数据列表构建界面标准数据列表,
            },

            _自定义事件之处理程序集: {
                获取或构建字典的原始数据,
                根据字典原始数据构建映射器集,
                根据某字典原始数据项构建界面标准数据项,
            },
        }

        return 该字典机
    }



    const 该字典群之总机: 范_字典群之总机_实用型号 = {
        字典机之集: {
            列表形式: [],
            哈希表形式: {},
        },

        数据集: {
            用以构建各字典机之配置项集之列表: [],
        },

        行为: {
            初始化,
            令所有字典机按需获取或构建原始数据并进而构建衍生数据,
            追加一批字典机,
            取字典机,
            取字典机之列表形式的界面标准数据,
            取字典机之哈希表形式的界面标准数据,
        },

        _幕后行为: {
            按需追加单个字典机,
            构建单个字典机,
        },

        _自定义事件之处理程序集: {
            根据某字典原始数据构建其映射器集的默认做法,
            根据某字典之某原始数据项构建其对应界面标准数据项的默认做法,
        },
    }



    if (!不应自动初始化) {
        初始化()
    }



    return 该字典群之总机
}
